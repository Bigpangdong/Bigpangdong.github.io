<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>新建文档</title>
    <link href="/2021/12/21/%E6%96%B0%E5%BB%BA%E6%96%87%E6%9C%AC%E6%96%87%E6%A1%A3/"/>
    <url>/2021/12/21/%E6%96%B0%E5%BB%BA%E6%96%87%E6%9C%AC%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="获取收藏回答"><a href="#获取收藏回答" class="headerlink" title="获取收藏回答"></a>获取收藏回答</h1><p>请求URL</p><ul><li>/spec/getAllAnswer</li></ul><p>请求方式</p><ul><li>GET</li></ul><p>参数</p><table><thead><tr><th align="left">参数名</th><th align="left">必选</th><th align="left">类型</th><th>说明</th></tr></thead><tbody><tr><td align="left">good</td><td align="left">是</td><td align="left">String</td><td>对应人id</td></tr><tr><td align="left">size</td><td align="left">否</td><td align="left">String</td><td>当前页数量</td></tr><tr><td align="left">page</td><td align="left">否</td><td align="left">String</td><td>第n页</td></tr></tbody></table><p>请求示例</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">good</span>=<span class="hljs-string">&quot;60f6c5b09aa40f401bc9713f&quot;</span><br></code></pre></td></tr></table></figure><p>返回示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;data&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;list&quot;</span>: [<br>            &#123;<br>                <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;6194b371c607c1772c998f74&quot;</span>,<br>                <span class="hljs-attr">&quot;createdAt&quot;</span>: <span class="hljs-number">1637135217023</span>,<br>                <span class="hljs-attr">&quot;updatedAt&quot;</span>: <span class="hljs-number">1637135217023</span>,<br>                <span class="hljs-attr">&quot;postionID&quot;</span>: <span class="hljs-string">&quot;61945dc95ff90b34641f14b5&quot;</span>,<br>                <span class="hljs-attr">&quot;postion&quot;</span>: <span class="hljs-string">&quot;打瞌睡&quot;</span>,<br>                <span class="hljs-attr">&quot;respondentsID&quot;</span>: <span class="hljs-string">&quot;60f6c5b09aa40f401bc9713f&quot;</span>,<br>                <span class="hljs-attr">&quot;respondentsName&quot;</span>: <span class="hljs-string">&quot;胖胖&quot;</span>,<br>                <span class="hljs-attr">&quot;avatar&quot;</span>: <span class="hljs-string">&quot;https://dlz-private-test-1306402775.cos.ap-guangzhou.myqcloud.com/upload/avatar/60f6c5b09aa40f401bc9713f_20210930110905.png&quot;</span>,<br>                <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;按按&quot;</span>,<br>                <span class="hljs-attr">&quot;content&quot;</span>: <span class="hljs-string">&quot;&lt;p&gt;按按&lt;/p&gt;&quot;</span>,<br>                <span class="hljs-attr">&quot;answerStatus&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>                <span class="hljs-attr">&quot;shareNum&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>                <span class="hljs-attr">&quot;files&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">&quot;originalFiles&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">&quot;follow&quot;</span>: [],<br>                <span class="hljs-attr">&quot;good&quot;</span>: [<br>                    <span class="hljs-string">&quot;60b9dbdbad60b4e098170718&quot;</span><br>                ],<br>                <span class="hljs-attr">&quot;bad&quot;</span>: [],<br>                <span class="hljs-attr">&quot;draftStatus&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>                <span class="hljs-attr">&quot;startDate&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">&quot;endDate&quot;</span>: <span class="hljs-literal">null</span><br>            &#125;<br>        ]<br>    &#125;,<br>    <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-attr">&quot;success&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>返回参数说明</p><table><thead><tr><th>参数名</th><th>参数类型</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>错误码，200为正常</td></tr><tr><td>success</td><td>string</td><td></td></tr><tr><td>data</td><td>Array</td><td>请求正常</td></tr></tbody></table><p>备注</p><h1 id="获取关注问题"><a href="#获取关注问题" class="headerlink" title="获取关注问题"></a>获取关注问题</h1><p>请求URL</p><ul><li>/spec/getAllProblem</li></ul><p>请求方式</p><ul><li>GET</li></ul><p>参数</p><table><thead><tr><th align="left">参数名</th><th align="left">必选</th><th align="left">类型</th><th>说明</th></tr></thead><tbody><tr><td align="left">good</td><td align="left">是</td><td align="left">String</td><td>对应人id</td></tr><tr><td align="left">size</td><td align="left">否</td><td align="left">String</td><td>当前页数量</td></tr><tr><td align="left">page</td><td align="left">否</td><td align="left">String</td><td>第n页</td></tr></tbody></table><p>请求示例</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">good</span>=<span class="hljs-string">&quot;60f6c5b09aa40f401bc9713f&quot;</span><br></code></pre></td></tr></table></figure><p>返回示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;data&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">4</span>,<br>        <span class="hljs-attr">&quot;list&quot;</span>: [<br>            &#123;<br>                <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;618c8c069fb8df6bbf908079&quot;</span>,<br>                <span class="hljs-attr">&quot;createdAt&quot;</span>: <span class="hljs-number">1636600838606</span>,<br>                <span class="hljs-attr">&quot;updatedAt&quot;</span>: <span class="hljs-number">1636600838606</span>,<br>                <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>                <span class="hljs-attr">&quot;specId&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">&quot;specName&quot;</span>: <span class="hljs-string">&quot;住宅设计标准&quot;</span>,<br>                <span class="hljs-attr">&quot;region&quot;</span>: <span class="hljs-string">&quot;上海市&quot;</span>,<br>                <span class="hljs-attr">&quot;city&quot;</span>: <span class="hljs-string">&quot;上海市&quot;</span>,<br>                <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;“我知道你最近很累，是那种看不见的，身体上和精神上的疲惫感，但是请你一定要坚持下去。&quot;</span>,<br>                <span class="hljs-attr">&quot;content&quot;</span>: <span class="hljs-string">&quot;&lt;p&gt;&lt;span style=\&quot;color: rgb(18, 18, 18);\&quot;&gt;就算无人问津也好，技不如人也罢，千万别让烦恼和焦虑毁了你本就不多的热情和定力。别贪心，我们不可能什么都有，别担心，我们也不可能什么都没有。”&lt;/span&gt;&lt;/p&gt;&quot;</span>,<br>                <span class="hljs-attr">&quot;userID&quot;</span>: <span class="hljs-string">&quot;6177a7974aab316fefd9efdf&quot;</span>,<br>                <span class="hljs-attr">&quot;userName&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">&quot;avatar&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>                <span class="hljs-attr">&quot;auditStatus&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>                <span class="hljs-attr">&quot;askStatus&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>                <span class="hljs-attr">&quot;shareNum&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>                <span class="hljs-attr">&quot;browseNum&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>                <span class="hljs-attr">&quot;answerNum&quot;</span>: <span class="hljs-string">&quot;4&quot;</span>,<br>                <span class="hljs-attr">&quot;follow&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">&quot;good&quot;</span>: [<br>                    <span class="hljs-string">&quot;60f6c5b09aa40f401bc9713f&quot;</span>,<br>                    <span class="hljs-string">&quot;b2&quot;</span><br>                ],<br>                <span class="hljs-attr">&quot;bad&quot;</span>: [<br>                    <span class="hljs-string">&quot;0&quot;</span><br>                ],<br>                <span class="hljs-attr">&quot;startDate&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">&quot;endDate&quot;</span>: <span class="hljs-literal">null</span><br>            &#125;<br>        ]<br>    &#125;,<br>    <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-attr">&quot;success&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>返回参数说明</p><table><thead><tr><th>参数名</th><th>参数类型</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>错误码，200为正常</td></tr><tr><td>success</td><td>string</td><td></td></tr><tr><td>data</td><td>Array</td><td>请求正常</td></tr></tbody></table><p>备注</p><h1 id="获取原创问题"><a href="#获取原创问题" class="headerlink" title="获取原创问题"></a>获取原创问题</h1><p>请求URL</p><ul><li>/spec/getAllProblem</li></ul><p>请求方式</p><ul><li>GET</li></ul><p>参数</p><table><thead><tr><th align="left">参数名</th><th align="left">必选</th><th align="left">类型</th><th>说明</th></tr></thead><tbody><tr><td align="left">userID</td><td align="left">是</td><td align="left">String</td><td>对应人id</td></tr><tr><td align="left">size</td><td align="left">否</td><td align="left">String</td><td>当前页数量</td></tr><tr><td align="left">page</td><td align="left">否</td><td align="left">String</td><td>第n页</td></tr></tbody></table><p>请求示例</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">userID</span>=<span class="hljs-string">&quot;60f6c5b09aa40f401bc9713f&quot;</span><br></code></pre></td></tr></table></figure><p>返回示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;data&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;list&quot;</span>: [<br>            &#123;<br>                <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;618c8c069fb8df6bbf908079&quot;</span>,<br>                <span class="hljs-attr">&quot;createdAt&quot;</span>: <span class="hljs-number">1636600838606</span>,<br>                <span class="hljs-attr">&quot;updatedAt&quot;</span>: <span class="hljs-number">1636600838606</span>,<br>                <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>                <span class="hljs-attr">&quot;specId&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">&quot;specName&quot;</span>: <span class="hljs-string">&quot;住宅设计标准&quot;</span>,<br>                <span class="hljs-attr">&quot;region&quot;</span>: <span class="hljs-string">&quot;上海市&quot;</span>,<br>                <span class="hljs-attr">&quot;city&quot;</span>: <span class="hljs-string">&quot;上海市&quot;</span>,<br>                <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;“我知道你最近很累，是那种看不见的，身体上和精神上的疲惫感，但是请你一定要坚持下去。&quot;</span>,<br>                <span class="hljs-attr">&quot;content&quot;</span>: <span class="hljs-string">&quot;&lt;p&gt;&lt;span style=\&quot;color: rgb(18, 18, 18);\&quot;&gt;就算无人问津也好，技不如人也罢，千万别让烦恼和焦虑毁了你本就不多的热情和定力。别贪心，我们不可能什么都有，别担心，我们也不可能什么都没有。”&lt;/span&gt;&lt;/p&gt;&quot;</span>,<br>                <span class="hljs-attr">&quot;userID&quot;</span>: <span class="hljs-string">&quot;6177a7974aab316fefd9efdf&quot;</span>,<br>                <span class="hljs-attr">&quot;userName&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">&quot;avatar&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>                <span class="hljs-attr">&quot;auditStatus&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>                <span class="hljs-attr">&quot;askStatus&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>                <span class="hljs-attr">&quot;shareNum&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>                <span class="hljs-attr">&quot;browseNum&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>                <span class="hljs-attr">&quot;answerNum&quot;</span>: <span class="hljs-string">&quot;4&quot;</span>,<br>                <span class="hljs-attr">&quot;follow&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">&quot;good&quot;</span>: [<br>                    <span class="hljs-string">&quot;60f6c5b09aa40f401bc9713f&quot;</span>,<br>                    <span class="hljs-string">&quot;b2&quot;</span><br>                ],<br>                <span class="hljs-attr">&quot;bad&quot;</span>: [<br>                    <span class="hljs-string">&quot;0&quot;</span><br>                ],<br>                <span class="hljs-attr">&quot;startDate&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">&quot;endDate&quot;</span>: <span class="hljs-literal">null</span><br>            &#125;<br>        ]<br>    &#125;,<br>    <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-attr">&quot;success&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>返回参数说明</p><table><thead><tr><th>参数名</th><th>参数类型</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>错误码，200为正常</td></tr><tr><td>success</td><td>string</td><td></td></tr><tr><td>data</td><td>Array</td><td>请求正常</td></tr></tbody></table><p>备注</p><h1 id="获取原创回答"><a href="#获取原创回答" class="headerlink" title="获取原创回答"></a>获取原创回答</h1><p>请求URL</p><ul><li>/spec/getAllAnswer</li></ul><p>请求方式</p><ul><li>GET</li></ul><p>参数</p><table><thead><tr><th align="left">参数名</th><th align="left">必选</th><th align="left">类型</th><th>说明</th></tr></thead><tbody><tr><td align="left">respondentsID</td><td align="left">是</td><td align="left">String</td><td>对应人id</td></tr><tr><td align="left">size</td><td align="left">否</td><td align="left">String</td><td>当前页数量</td></tr><tr><td align="left">page</td><td align="left">否</td><td align="left">String</td><td>第n页</td></tr></tbody></table><p>请求示例</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">respondentsID</span>=<span class="hljs-string">&quot;60f6c5b09aa40f401bc9713f&quot;</span><br></code></pre></td></tr></table></figure><p>返回示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;data&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;list&quot;</span>: [<br>            &#123;<br>                <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;6194b371c607c1772c998f74&quot;</span>,<br>                <span class="hljs-attr">&quot;createdAt&quot;</span>: <span class="hljs-number">1637135217023</span>,<br>                <span class="hljs-attr">&quot;updatedAt&quot;</span>: <span class="hljs-number">1637135217023</span>,<br>                <span class="hljs-attr">&quot;postionID&quot;</span>: <span class="hljs-string">&quot;61945dc95ff90b34641f14b5&quot;</span>,<br>                <span class="hljs-attr">&quot;postion&quot;</span>: <span class="hljs-string">&quot;打瞌睡&quot;</span>,<br>                <span class="hljs-attr">&quot;respondentsID&quot;</span>: <span class="hljs-string">&quot;60f6c5b09aa40f401bc9713f&quot;</span>,<br>                <span class="hljs-attr">&quot;respondentsName&quot;</span>: <span class="hljs-string">&quot;胖胖&quot;</span>,<br>                <span class="hljs-attr">&quot;avatar&quot;</span>: <span class="hljs-string">&quot;https://dlz-private-test-1306402775.cos.ap-guangzhou.myqcloud.com/upload/avatar/60f6c5b09aa40f401bc9713f_20210930110905.png&quot;</span>,<br>                <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;按按&quot;</span>,<br>                <span class="hljs-attr">&quot;content&quot;</span>: <span class="hljs-string">&quot;&lt;p&gt;按按&lt;/p&gt;&quot;</span>,<br>                <span class="hljs-attr">&quot;answerStatus&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>                <span class="hljs-attr">&quot;shareNum&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>                <span class="hljs-attr">&quot;files&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">&quot;originalFiles&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">&quot;follow&quot;</span>: [],<br>                <span class="hljs-attr">&quot;good&quot;</span>: [<br>                    <span class="hljs-string">&quot;60b9dbdbad60b4e098170718&quot;</span><br>                ],<br>                <span class="hljs-attr">&quot;bad&quot;</span>: [],<br>                <span class="hljs-attr">&quot;draftStatus&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>                <span class="hljs-attr">&quot;startDate&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">&quot;endDate&quot;</span>: <span class="hljs-literal">null</span><br>            &#125;<br>        ]<br>    &#125;,<br>    <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-attr">&quot;success&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>返回参数说明</p><table><thead><tr><th>参数名</th><th>参数类型</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>错误码，200为正常</td></tr><tr><td>success</td><td>string</td><td></td></tr><tr><td>data</td><td>Array</td><td>请求正常</td></tr></tbody></table><p>备注</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>spring注解</title>
    <link href="/2021/12/21/spring%E6%B3%A8%E8%A7%A3/"/>
    <url>/2021/12/21/spring%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h5 id="PostMapping"><a href="#PostMapping" class="headerlink" title="@PostMapping"></a>@PostMapping</h5><ul><li><p>参数不带文件：前端使用JSON格式发送数据，后端接口参数加@RequestBody 前缀</p></li><li><p>参数带文件：不加@RequestBody 前缀</p></li></ul><p>​    <strong>@RequestBody</strong>主要用来接收前端传递给后端的json字符串中的数据的(请求体中的数据的)；而最常用的使用请求体传参的无疑是POST请求了，所以使用@RequestBody接收数据时，一般都用POST方式进行提交。</p><p>​    在后端的同一个接收方法里，@RequestBody与@RequestParam()可以同时使用，@RequestBody最多只能有一个，而@RequestParam()可以有多个。</p>]]></content>
    
    
    
    <tags>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springCloud微服务面试问题</title>
    <link href="/2021/12/21/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
    <url>/2021/12/21/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>1.1 什么是微服务？</p><p>1.2 微服务之间是如何独立通讯的？</p><p>1.3 SpringCloud 和 Dubbo有那些区别？</p><p>1.4 SpringBoot 和 SpringCloud，请谈谈你对他们的理解</p><p>1.5 什么是服务熔断？什么是服务降级？</p><p>1.6 微服务的优缺点分别是什么？说下你在项目开发中遇到的坑</p><p>1.7 你所知道的微服务技术栈有哪些？列举一二</p><p>1.8 Eureka和Zookeeper都可以提供服务注册与发现的功能，请说说两者的区别</p><p>…</p><h1 id="微服务概述"><a href="#微服务概述" class="headerlink" title="微服务概述"></a>微服务概述</h1><h2 id="2-1-什么是微服务？"><a href="#2-1-什么是微服务？" class="headerlink" title="2.1 什么是微服务？"></a>2.1 什么是微服务？</h2><p>微服务(Microservice Architecture) 是近几年流行的一种架构思想，关于它的概念很难一言以蔽之。</p><p>究竟什么是微服务呢？我们在此引用ThoughtWorks 公司的首席科学家 Martin Fowler 于2014年提出的一段话：</p><p>原文：<a href="https://martinfowler.com/articles/microservices.html">https://martinfowler.com/articles/microservices.html</a></p><p>汉化：<a href="https://www.cnblogs.com/liuning8023/p/4493156.html">https://www.cnblogs.com/liuning8023/p/4493156.html</a></p><p>​    就目前而言，对于微服务，业界并没有一个统一的，标准的定义。<br>但通常而言，微服务架构是一种架构模式，或者说是一种架构风格，它体长将单一的应用程序划分成一组小的服务，每个服务运行在其独立的自己的进程内，服务之间互相协调，互相配置，为用户提供最终价值，服务之间采用轻量级的通信机制(HTTP)互相沟通，每个服务都围绕着具体的业务进行构建，并且能狗被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应该根据业务上下文，选择合适的语言，工具(Maven)对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储。<br>再来从技术维度角度理解下：</p><p>​    微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合，每一个微服务提供单个业务功能的服务，一个服务做一件事情，从技术角度看就是一种小而独立的处理过程，类似进程的概念，能够自行单独启动或销毁，拥有自己独立的数据库。</p><h2 id="2-2微服务与微服务架构"><a href="#2-2微服务与微服务架构" class="headerlink" title="2.2微服务与微服务架构"></a>2.2微服务与微服务架构</h2><h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><p>​    强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题/提供落地对应服务的一个服务应用，狭义的看，可以看作是IDEA中的一个个微服务工程，或者Moudel。IDEA 工具里面使用Maven开发的一个个独立的小Moudel，它具体是使用SpringBoot开发的一个小模块，专业的事情交给专业的模块来做，一个模块就做着一件事情。强调的是一个个的个体，每个个体完成一个具体的任务或者功能。</p><h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h3><p>一种新的架构形式，Martin Fowler 于2014年提出。</p><p>​    微服务架构是一种架构模式，它体长将单一应用程序划分成一组小的服务，服务之间相互协调，互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务之间采用轻量级的通信机制**(如HTTP)互相协作，每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具(如Maven)**对其进行构建。</p><h2 id="2-3-微服务优缺点"><a href="#2-3-微服务优缺点" class="headerlink" title="2.3 微服务优缺点"></a>2.3 微服务优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>单一职责原则；</li><li>每个服务足够内聚，足够小，代码容易理解，这样能聚焦一个指定的业务功能或业务需求；</li><li>开发简单，开发效率高，一个服务可能就是专一的只干一件事；</li><li>微服务能够被小团队单独开发，这个团队只需2-5个开发人员组成；</li><li>微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的；</li><li>微服务能使用不同的语言开发；</li><li>易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如jenkins，Hudson，bamboo；</li><li>微服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果，无需通过合作才能体现价值；</li><li>微服务允许利用和融合最新技术；</li><li>微服务只是业务逻辑的代码，不会和HTML，CSS，或其他的界面混合;</li><li>每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一的数据库；</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>开发人员要处理分布式系统的复杂性；</li><li>多服务运维难度，随着服务的增加，运维的压力也在增大；</li><li>系统部署依赖问题；</li><li>服务间通信成本问题；</li><li>数据一致性问题；</li><li>系统集成测试问题；</li><li>性能和监控问题；</li></ol><h2 id="2-4-微服务技术栈"><a href="#2-4-微服务技术栈" class="headerlink" title="2.4 微服务技术栈"></a>2.4 微服务技术栈</h2><table><thead><tr><th>微服务技术条目</th><th>落地技术</th></tr></thead><tbody><tr><td>服务开发</td><td>SpringBoot、Spring、SpringMVC等</td></tr><tr><td>服务配置与管理</td><td>Netfix公司的Archaius、阿里的Diamond等</td></tr><tr><td>服务注册与发现</td><td>Eureka、Consul、Zookeeper等</td></tr><tr><td>服务调用</td><td>Rest、PRC、gRPC</td></tr><tr><td>服务熔断器</td><td>Hystrix、Envoy等</td></tr><tr><td>负载均衡</td><td>Ribbon、Nginx等</td></tr><tr><td>服务接口调用(客户端调用服务的简化工具)</td><td>Fegin等</td></tr><tr><td>消息队列</td><td>Kafka、RabbitMQ、ActiveMQ等</td></tr><tr><td>服务配置中心管理</td><td>SpringCloudConfig、Chef等</td></tr><tr><td>服务路由(API网关)</td><td>Zuul等</td></tr><tr><td>服务监控</td><td>Zabbix、Nagios、Metrics、Specatator等</td></tr><tr><td>全链路追踪</td><td>Zipkin、Brave、Dapper等</td></tr><tr><td>数据流操作开发包</td><td>SpringCloud Stream(封装与Redis，Rabbit，Kafka等发送接收消息)</td></tr><tr><td>时间消息总栈</td><td>SpringCloud Bus</td></tr><tr><td>服务部署</td><td>Docker、OpenStack、Kubernetes等</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot项目中使用mongo</title>
    <link href="/2021/12/21/SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8mongo/"/>
    <url>/2021/12/21/SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8mongo/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot项目中使用mongo"><a href="#SpringBoot项目中使用mongo" class="headerlink" title="SpringBoot项目中使用mongo"></a>SpringBoot项目中使用mongo</h1><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>在POM 中添加如下依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>在配置文件 <code>application.yml</code> 添加如下配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">server:<br>  port: <span class="hljs-number">8081</span><br><br>spring:<br>  profiles:<br>    active: dev<br>  data:<br>    mongodb:<br>      host: <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.201</span><br>      port: <span class="hljs-number">27017</span><br>      database: admin<br>      username: dlz-tech<br>      password: dlz9988<br>      authentication-database: admin<br></code></pre></td></tr></table></figure><h2 id="DemoEntity"><a href="#DemoEntity" class="headerlink" title="DemoEntity"></a>DemoEntity</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Document(collection = &quot;demo_collection&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoEntity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String description;<br>    <span class="hljs-keyword">private</span> String by;<br>    <span class="hljs-keyword">private</span> String url;<br>    省略 getter setter<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Demo-DAO-接口"><a href="#Demo-DAO-接口" class="headerlink" title="Demo DAO 接口"></a>Demo DAO 接口</h2><p>提供增删改查 MongoDB 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DemoDao</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">saveDemo</span><span class="hljs-params">(DemoEntity demoEntity)</span></span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">removeDemo</span><span class="hljs-params">(Long id)</span></span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateDemo</span><span class="hljs-params">(DemoEntity demoEntity)</span></span>;<br>    <br>    <span class="hljs-function">DemoEntity <span class="hljs-title">findDemoById</span><span class="hljs-params">(Long id)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Demo DAO 实现<br>提供增删改查 MongoDB 接口实现</p><p>Spring Data Mongo提供了一个 MongoTemplate类似于Spring的设计的类JdbcTemplate。和JdbcTemplateSpring Boot一样，自动配置一个bean来简单地注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 描述: Demo DAO 实现</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> yanpenglei</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2018-02-03 16:57</span><br><span class="hljs-comment">   **/</span><br>   <span class="hljs-meta">@Component</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DemoDao</span> </span>&#123;<br><br>   <span class="hljs-meta">@Resource</span><br>   <span class="hljs-keyword">private</span> MongoTemplate mongoTemplate;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveDemo</span><span class="hljs-params">(DemoEntity demoEntity)</span> </span>&#123;<br>       mongoTemplate.save(demoEntity);<br>   &#125;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeDemo</span><span class="hljs-params">(Long id)</span> </span>&#123;<br>       Query query=<span class="hljs-keyword">new</span> Query(Criteria.where(<span class="hljs-string">&quot;_id&quot;</span>).is(aid));<br>       <span class="hljs-comment">/*或者</span><br><span class="hljs-comment">       DemoEntity demoEntity = new DemoEntity();</span><br><span class="hljs-comment">       demoEntity.setId(id);</span><br><span class="hljs-comment">       */</span><br>       mongoTemplate.remove(query,SpecAnswerModel.class,<span class="hljs-string">&quot;t_spec_answer&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateDemo</span><span class="hljs-params">(DemoEntity demoEntity)</span> </span>&#123;<br>       Query query = <span class="hljs-keyword">new</span> Query(Criteria.where(<span class="hljs-string">&quot;id&quot;</span>).is(demoEntity.getId()));<br>       Update update = <span class="hljs-keyword">new</span> Update();<br>       update.set(<span class="hljs-string">&quot;title&quot;</span>, demoEntity.getTitle());<br>       update.set(<span class="hljs-string">&quot;description&quot;</span>, demoEntity.getDescription());<br>       update.set(<span class="hljs-string">&quot;by&quot;</span>, demoEntity.getBy());<br>       update.set(<span class="hljs-string">&quot;url&quot;</span>, demoEntity.getUrl());<br>       mongoTemplate.updateFirst(query, update, DemoEntity.class);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> DemoEntity <span class="hljs-title">findDemoById</span><span class="hljs-params">(Long id)</span> </span>&#123;<br>       Query query = <span class="hljs-keyword">new</span> Query(Criteria.where(<span class="hljs-string">&quot;id&quot;</span>).is(id));<br>       DemoEntity demoEntity = mongoTemplate.findOne(query, DemoEntity.class);<br>       <span class="hljs-keyword">return</span> demoEntity;<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringBootMongodbApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(SpringBootMongodbApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p> 根据问题id(所属问题、发布时间、回答状态、发布人)获取回答列表分页查询</p><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@Description</span>: 根据问题id获取回答列表分页查询</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@GetMapping(&quot;/getPidByAnswer&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResultBuilder <span class="hljs-title">getPidByAnswer</span><span class="hljs-params">(SpecAnswerModel specAnswerModel, Pageable pageable)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (pageable.getPageNumber() &gt; <span class="hljs-number">0</span>) &#123;<br>        pageable = PageRequest.of(pageable.getPageNumber() - <span class="hljs-number">1</span>, pageable.getPageSize(), pageable.getSort());<br>    &#125;<br>    Map&lt;String, Object&gt; res = specService.getAllAnswer(specAnswerModel, pageable);<br><span class="hljs-comment">//        List&lt;SpecAnswerModel&gt; res = specService.getPidByAnswers(specAnswerModel);</span><br>    <span class="hljs-keyword">return</span> ResultBuilder.success(res);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 根据回答id获取回答</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@GetMapping(&quot;/getAidByAnswer&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResultBuilder <span class="hljs-title">getAidByAnswer</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String aid)</span> </span>&#123;<br>    List&lt;SpecAnswerModel&gt; res = specService.getAidByAnswer(aid);<br>    <span class="hljs-keyword">return</span> ResultBuilder.success(res);<br>&#125;<br></code></pre></td></tr></table></figure><p>Servier</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据问题id获取回答列表分页查询</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">getAllAnswer</span><span class="hljs-params">(SpecAnswerModel specAnswerModel, Pageable pageable)</span> </span>&#123;<br>    Field[] allFields = SpecAnswerModel.class.getDeclaredFields();<br>    Map&lt;String, Object&gt; condition = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (Field field : allFields) &#123;<br>        String name = field.getName();<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Object value = field.get(specAnswerModel);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != value) condition.put(name, value);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>    Long count = specDao.countAnswer(condition);<br>    Map&lt;String, Integer&gt; filter = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    filter.put(<span class="hljs-string">&quot;userId&quot;</span>, <span class="hljs-number">0</span>);<br>    List&lt;SpecAnswerModel&gt; list = specDao.findAnswer(condition, filter, pageable);<br>    Map&lt;String, Object&gt; res = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    res.put(<span class="hljs-string">&quot;total&quot;</span>, count);<br>    res.put(<span class="hljs-string">&quot;list&quot;</span>, list);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>Dao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> Query <span class="hljs-title">conditionToQuery</span><span class="hljs-params">(Map&lt;String, Object&gt; condition)</span> </span>&#123;<br>    Query query = <span class="hljs-keyword">new</span> Query();<br>    Criteria criteria = Criteria.where(<span class="hljs-string">&quot;createdAt&quot;</span>);<br>    <span class="hljs-keyword">boolean</span> b = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : condition.entrySet()) &#123;<br>        <span class="hljs-keyword">switch</span> (entry.getKey()) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;id&quot;</span>: &#123;<br>                query.addCriteria(Criteria.where(<span class="hljs-string">&quot;_id&quot;</span>).is(entry.getValue()));<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;ids&quot;</span>: &#123;<br>                String[] strs = (String[]) entry.getValue();<br>                List&lt;ObjectId&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i&lt;strs.length; i++) &#123;<br>                    list.add(<span class="hljs-keyword">new</span> ObjectId(strs[i]));<br>                &#125;<br>                query.addCriteria(Criteria.where(<span class="hljs-string">&quot;_id&quot;</span>).in(list));<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;fileName&quot;</span>: &#123;<br>                query.addCriteria(Criteria.where(<span class="hljs-string">&quot;fileName&quot;</span>).regex((String) entry.getValue()));<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;startDate&quot;</span>: &#123;<br>                b = <span class="hljs-keyword">true</span>;<br>                criteria.gte(entry.getValue());<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;endDate&quot;</span>: &#123;<br>                b = <span class="hljs-keyword">true</span>;<br>                criteria.lte(entry.getValue());<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">default</span>:<br>                query.addCriteria(Criteria.where(entry.getKey()).is(entry.getValue()));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (b) query.addCriteria(criteria);<br>    <span class="hljs-keyword">return</span> query;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">countAnswer</span><span class="hljs-params">(Map&lt;String, Object&gt; condition)</span> </span>&#123;<br>    Query query = conditionToQuery(condition);<br>    Long count = mongoTemplate.count(query, <span class="hljs-string">&quot;t_spec_answer&quot;</span>);<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><span class="hljs-comment">//根据问题id获取回答列表分页查询</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;SpecAnswerModel&gt; <span class="hljs-title">findAnswer</span><span class="hljs-params">(Map&lt;String, Object&gt; condition, Map&lt;String, Integer&gt; filter, Pageable pageable)</span> </span>&#123;<br>    Query query = conditionToQuery(condition);<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : filter.entrySet()) &#123;<br>        <span class="hljs-keyword">if</span> (entry.getValue() == <span class="hljs-number">1</span>) &#123;<br>            query.fields().include(entry.getKey());<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (entry.getValue() == <span class="hljs-number">0</span>) &#123;<br>            query.fields().exclude(entry.getKey());<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (pageable!= <span class="hljs-keyword">null</span>) query.with(pageable);<br>    List&lt;SpecAnswerModel&gt; res = mongoTemplate.find(query, SpecAnswerModel.class, <span class="hljs-string">&quot;t_spec_answer&quot;</span>);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="MongoDB增删改查语句"><a href="#MongoDB增删改查语句" class="headerlink" title="MongoDB增删改查语句"></a>MongoDB增删改查语句</h1><p>Criteria类：封装所有的语句，以方法的形式进行查询。<br>Query类：将语句进行封装或者添加排序之类的操作。</p><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><p><img src="C:\Users\Admin\AppData\Roaming\Typora\typora-user-images\image-20211028183245866.png" alt="image-20211028183245866"></p><h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><p><img src="C:\Users\Admin\AppData\Roaming\Typora\typora-user-images\image-20211028183258812.png" alt="image-20211028183258812"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateDemo</span><span class="hljs-params">(DemoEntity demoEntity)</span> </span>&#123;<br>    Query query = <span class="hljs-keyword">new</span> Query(Criteria.where(<span class="hljs-string">&quot;id&quot;</span>).is(demoEntity.getId()));<br>    Update update = <span class="hljs-keyword">new</span> Update();<br>    update.set(<span class="hljs-string">&quot;title&quot;</span>, demoEntity.getTitle());<br>    update.set(<span class="hljs-string">&quot;description&quot;</span>, demoEntity.getDescription());<br>    update.set(<span class="hljs-string">&quot;by&quot;</span>, demoEntity.getBy());<br>    update.set(<span class="hljs-string">&quot;url&quot;</span>, demoEntity.getUrl());<br>mongoTemplate.updateFirst(query, update, DemoEntity.class);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><p>(<img src="https://images.gitee.com/uploads/images/2021/1109/141119_d457e81b_8229615.png" alt="输入图片说明" title="image-20211028175722179.png">)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*查询所有*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;SpecModel&gt; <span class="hljs-title">findRegion</span><span class="hljs-params">(String region)</span> </span>&#123;<br>    List&lt;SpecModel&gt; res = mongoTemplate.findAll(SpecModel.class, <span class="hljs-string">&quot;t_specification&quot;</span>);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*多条件查询*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;SpecModel&gt; <span class="hljs-title">findToSpecProblem</span><span class="hljs-params">(SpecAskModel specAskModel)</span> </span>&#123;<br>    Criteria criteria = <span class="hljs-keyword">null</span>;<br>    criteria =Criteria.where(<span class="hljs-string">&quot;type&quot;</span>).is(specAskModel.getType());<br>    criteria =criteria.and(<span class="hljs-string">&quot;region&quot;</span>).is(specAskModel.getRegion());<br>    Query query=<span class="hljs-keyword">new</span> Query(criteria);<br>    List&lt;SpecModel&gt; res = mongoTemplate.find(query, SpecAskModel.class, <span class="hljs-string">&quot;t_spec_problem&quot;</span>);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*查询唯一*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> DemoEntity <span class="hljs-title">findDemoById</span><span class="hljs-params">(Long id)</span> </span>&#123;<br>    Query query = <span class="hljs-keyword">new</span> Query(Criteria.where(<span class="hljs-string">&quot;id&quot;</span>).is(id));<br>    DemoEntity demoEntity = mongoTemplate.findOne(query, DemoEntity.class);<br>    <span class="hljs-keyword">return</span> demoEntity;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*查询去重*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;SpecModel&gt; <span class="hljs-title">getCityByRegion</span><span class="hljs-params">(String region)</span> </span>&#123;<br>    Query query=<span class="hljs-keyword">new</span> Query(Criteria.where(<span class="hljs-string">&quot;region&quot;</span>).is(region));<br>    List&lt;SpecModel&gt; res = mongoTemplate.findDistinct(query,<span class="hljs-string">&quot;city&quot;</span>,SpecModel.class,SpecModel.class);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*模糊查询获取*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;SpecAskModel&gt; <span class="hljs-title">getAllProblem</span><span class="hljs-params">(SpecAskModel specAskModel)</span> </span>&#123;<br>    Criteria criteria = <span class="hljs-keyword">null</span>;<br>    String str =specAskModel.getCity()!=<span class="hljs-keyword">null</span>? <span class="hljs-string">&quot;.*?&quot;</span>+specAskModel.getCity()+<span class="hljs-string">&quot;.*&quot;</span>:<span class="hljs-string">&quot;.*.*&quot;</span>;<br>    criteria =Criteria.where(<span class="hljs-string">&quot;city&quot;</span>).regex(str);<br>    Query query=<span class="hljs-keyword">new</span> Query(criteria);<br>    List&lt;SpecAskModel&gt; res = mongoTemplate.find(query,SpecAskModel.class, <span class="hljs-string">&quot;t_spec_question&quot;</span>);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">*<span class="hljs-comment">//is相当于等于*  </span><br>*<span class="hljs-comment">//in相当于sql中的in*  </span><br>*<span class="hljs-comment">//ne相当于不等于*  </span><br>*<span class="hljs-comment">//orOperator接受多个条件，组成or逻辑* </span><br></code></pre></td></tr></table></figure><h3 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Query query = <span class="hljs-keyword">new</span> Query();<br>Criteria criteria = Criteria.where(<span class="hljs-string">&quot;createdAt&quot;</span>);<br>query.addCriteria(Criteria.where(<span class="hljs-string">&quot;_id&quot;</span>).is(entry.getValue()));<br>query.addCriteria(Criteria.where(<span class="hljs-string">&quot;_id&quot;</span>).in(list));<br>query.addCriteria(Criteria.where(<span class="hljs-string">&quot;fileName&quot;</span>).regex((String) entry.getValue()));<br></code></pre></td></tr></table></figure><h4 id="对内嵌数组进行增删改操作"><a href="#对内嵌数组进行增删改操作" class="headerlink" title="对内嵌数组进行增删改操作"></a>对内嵌数组进行增删改操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,String&gt; <span class="hljs-title">updateOperation</span><span class="hljs-params">(Map&lt;String,String&gt; map, Class&lt;?&gt; entityClass)</span> </span>&#123;<br>    Query query = Query.query(Criteria.where(<span class="hljs-string">&quot;_id&quot;</span>).is(map.get(<span class="hljs-string">&quot;id&quot;</span>)));<br>        query.addCriteria(Criteria.where(map.get(<span class="hljs-string">&quot;operation&quot;</span>)).is(map.get(<span class="hljs-string">&quot;userId&quot;</span>)));<br>    <span class="hljs-keyword">long</span> listLen = mongoTemplate.find(query, SpecAskModel.class).size();<br>    Update update = <span class="hljs-keyword">new</span> Update();<br>    <span class="hljs-keyword">if</span> (Boolean.valueOf(map.get(<span class="hljs-string">&quot;state&quot;</span>)) &amp;&amp; listLen == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//插入</span><br>        update.push(map.get(<span class="hljs-string">&quot;operation&quot;</span>),map.get(<span class="hljs-string">&quot;userId&quot;</span>));<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!Boolean.valueOf(map.get(<span class="hljs-string">&quot;state&quot;</span>)) &amp;&amp; listLen != <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">//删除</span><br>        update.pull(map.get(<span class="hljs-string">&quot;operation&quot;</span>),map.get(<span class="hljs-string">&quot;userId&quot;</span>));<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>    query = Query.query(Criteria.where(<span class="hljs-string">&quot;_id&quot;</span>).is(map.get(<span class="hljs-string">&quot;id&quot;</span>)));<br>    System.out.println(query);<br>    UpdateResult res = mongoTemplate.updateFirst(query, update, entityClass);<br>    <span class="hljs-keyword">return</span> map;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Aggregation分组聚合"><a href="#Aggregation分组聚合" class="headerlink" title="Aggregation分组聚合"></a>Aggregation分组聚合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Aggregation aggregation  = Aggregation.newAggregation(<br>                Aggregation.project(<span class="hljs-string">&quot;_id&quot;</span>,<span class="hljs-string">&quot;houseNum&quot;</span>,<span class="hljs-string">&quot;city&quot;</span>,<span class="hljs-string">&quot;region&quot;</span>,<span class="hljs-string">&quot;type&quot;</span>,<span class="hljs-string">&quot;buildingType&quot;</span>,<span class="hljs-string">&quot;height&quot;</span>),<br>                Aggregation.match(criteria),<br><span class="hljs-comment">//                Aggregation.unwind(&quot;orders&quot;),</span><br>                Aggregation.group(<span class="hljs-string">&quot;buildingType&quot;</span>).count().as(<span class="hljs-string">&quot;count&quot;</span>),<br><span class="hljs-comment">//                Aggregation.sort(new Sort(new Sort.Order(Sort.Direction.DESC, &quot;totalPayment&quot;))),</span><br>                Aggregation.skip(pageable.getPageNumber()*pageable.getPageSize()),<br>                Aggregation.limit(pageable.getPageSize())<br>        );<br>        List result = mongoTemplate.aggregate(aggregation,<span class="hljs-string">&quot;t_file_info&quot;</span>,Map.class).getMappedResults();<br></code></pre></td></tr></table></figure><ul><li>project:列出所有本次查询的字段，包括查询条件的字段和需要搜索的字段；</li></ul><ul><li><p>match:搜索条件criteria</p></li><li><p>unwind：某一个字段是集合，将该字段分解成数组</p></li><li><p>group：分组的字段，以及聚合相关查询</p></li><li><p>sum：求和(同sql查询)</p></li><li><p>count：数量(同sql查询)</p></li><li><p>as:别名(同sql查询)</p></li><li><p>addToSet：将符合的字段值添加到一个集合或数组中</p></li></ul><ul><li>sort：排序</li></ul><ul><li><p>skip：接受一个数字n，丢弃结果集中的前n个文档。效率比较低，依然会遍历前n个文档</p></li><li><p>limit：接受一个数字n，返回结果集中的前n个文档</p></li></ul><p><img src="C:\Users\Admin\AppData\Roaming\Typora\typora-user-images\image-20211125173923178.png" alt="image-20211125173923178"></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>mongo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot学习</title>
    <link href="/2021/12/21/SpringBoot%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/12/21/SpringBoot%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot学习"><a href="#SpringBoot学习" class="headerlink" title="SpringBoot学习"></a>SpringBoot学习</h1><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>springboot+maven</p><p>登录的验证和授权是spring security</p><p>数据库是mybatis plus</p><p>缓存Redis</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><img src="C:\Users\Admin\AppData\Roaming\Typora\typora-user-images\image-20211112145243967.png" alt="image-20211112145243967"></p><p><img src="C:\Users\Admin\AppData\Roaming\Typora\typora-user-images\image-20211112145541054.png" alt="image-20211112145541054"></p><p>以上所有位置的配置文件都会被加载，且它们优先级依次降低，序号越小优先级越高。其次，位于相同位置的 application.properties 的优先级高于 application.yaml。</p><p>所有位置的文件都会被加载，高优先级配置会覆盖低优先级配置，形成互补配置，即：</p><ul><li>存在相同的配置内容时，高优先级的内容会覆盖低优先级的内容；</li><li>存在不同的配置内容时，高优先级和低优先级的配置内容取并集。</li></ul><p><img src="C:\Users\Admin\AppData\Roaming\Typora\typora-user-images\image-20211112155108146.png" alt="image-20211112155108146"></p><p><img src="C:\Users\Admin\AppData\Roaming\Typora\typora-user-images\image-20211112155332675.png" alt="image-20211112155332675"></p><p>命令行参数说明如下：</p><ul><li>–server.port：指定服务器端口号；</li><li>–server.servlet.context-path：指定上下文路径（项目的访问路径）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(value = &quot;SpecificationController&quot;,tags = &quot;用于规范的相关接口&quot; )</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  @ApiOperation(value = “接口说明”, httpMethod = “接口请求方式”, </span><br><span class="hljs-comment">            response = “接口返回参数类型”, notes = “接口发布说明”； </span><br><span class="hljs-comment">  @ApiParam(required = “是否必须参数”, name = “参数名称”, value = “参数具体描述” </span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>常用的注解如下：</p><ul><li>@Api()用于类名</li><li>@ApiOperation()用于方法名</li><li>@ApiParam()用于参数说明</li><li> @ApiModel()用于实体类</li><li>@ApiModelProperty用于实体类属性</li></ul><h2 id="RestTemplate使用"><a href="#RestTemplate使用" class="headerlink" title="RestTemplate使用"></a>RestTemplate使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">RestTemplate restTemplate = <span class="hljs-keyword">new</span> RestTemplate();<br></code></pre></td></tr></table></figure><h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h3><ol><li><p>getForEntity（）</p></li><li><p>getForObject（）</p></li></ol><h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><ol><li><p>postForEntity（）</p><blockquote><p>postForEntity ()方法</p><p>第一个参数是请求地址，</p><p>第二个参数 map 对象中存放着请求参数 key/value，</p><p>第三个参数则是返回的数据类型。</p></blockquote></li><li><p>postForObject（）</p></li><li><p>postForLocation（）</p></li></ol><table><thead><tr><th align="left"></th><th align="left"></th><th align="left"></th><th></th></tr></thead><tbody><tr><td align="left"></td><td align="left"></td><td align="left"></td><td></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td><td></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td><td></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot学习</title>
    <link href="/2021/12/21/springBoot/"/>
    <url>/2021/12/21/springBoot/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot学习"><a href="#SpringBoot学习" class="headerlink" title="SpringBoot学习"></a>SpringBoot学习</h1><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>springboot+maven</p><p>登录的验证和授权是spring security</p><p>数据库是mybatis plus</p><p>缓存Redis</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><img src="C:\Users\Admin\AppData\Roaming\Typora\typora-user-images\image-20211112145243967.png" alt="image-20211112145243967"></p><p><img src="C:\Users\Admin\AppData\Roaming\Typora\typora-user-images\image-20211112145541054.png" alt="image-20211112145541054"></p><p>以上所有位置的配置文件都会被加载，且它们优先级依次降低，序号越小优先级越高。其次，位于相同位置的 application.properties 的优先级高于 application.yaml。</p><p>所有位置的文件都会被加载，高优先级配置会覆盖低优先级配置，形成互补配置，即：</p><ul><li>存在相同的配置内容时，高优先级的内容会覆盖低优先级的内容；</li><li>存在不同的配置内容时，高优先级和低优先级的配置内容取并集。</li></ul><p><img src="C:\Users\Admin\AppData\Roaming\Typora\typora-user-images\image-20211112155108146.png" alt="image-20211112155108146"></p><p><img src="C:\Users\Admin\AppData\Roaming\Typora\typora-user-images\image-20211112155332675.png" alt="image-20211112155332675"></p><p>命令行参数说明如下：</p><ul><li>–server.port：指定服务器端口号；</li><li>–server.servlet.context-path：指定上下文路径（项目的访问路径）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(value = &quot;SpecificationController&quot;,tags = &quot;用于规范的相关接口&quot; )</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  @ApiOperation(value = “接口说明”, httpMethod = “接口请求方式”, </span><br><span class="hljs-comment">            response = “接口返回参数类型”, notes = “接口发布说明”； </span><br><span class="hljs-comment">  @ApiParam(required = “是否必须参数”, name = “参数名称”, value = “参数具体描述” </span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>常用的注解如下：</p><ul><li>@Api()用于类名</li><li>@ApiOperation()用于方法名</li><li>@ApiParam()用于参数说明</li><li> @ApiModel()用于实体类</li><li>@ApiModelProperty用于实体类属性</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mongo学习</title>
    <link href="/2021/12/21/mongo%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/12/21/mongo%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="MongoDB增删改查语句"><a href="#MongoDB增删改查语句" class="headerlink" title="MongoDB增删改查语句"></a>MongoDB增删改查语句</h1><p>Criteria类：封装所有的语句，以方法的形式进行查询。<br>Query类：将语句进行封装或者添加排序之类的操作。</p><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><p><img src="C:\Users\Admin\AppData\Roaming\Typora\typora-user-images\image-20211028183245866.png" alt="image-20211028183245866"></p><h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><p><img src="C:\Users\Admin\AppData\Roaming\Typora\typora-user-images\image-20211028183258812.png" alt="image-20211028183258812"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateDemo</span><span class="hljs-params">(DemoEntity demoEntity)</span> </span>&#123;<br>    Query query = <span class="hljs-keyword">new</span> Query(Criteria.where(<span class="hljs-string">&quot;id&quot;</span>).is(demoEntity.getId()));<br>    Update update = <span class="hljs-keyword">new</span> Update();<br>    update.set(<span class="hljs-string">&quot;title&quot;</span>, demoEntity.getTitle());<br>    update.set(<span class="hljs-string">&quot;description&quot;</span>, demoEntity.getDescription());<br>    update.set(<span class="hljs-string">&quot;by&quot;</span>, demoEntity.getBy());<br>    update.set(<span class="hljs-string">&quot;url&quot;</span>, demoEntity.getUrl());<br>mongoTemplate.updateFirst(query, update, DemoEntity.class);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><p>(<img src="https://images.gitee.com/uploads/images/2021/1109/141119_d457e81b_8229615.png" alt="输入图片说明" title="image-20211028175722179.png">)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*查询所有*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;SpecModel&gt; <span class="hljs-title">findRegion</span><span class="hljs-params">(String region)</span> </span>&#123;<br>    List&lt;SpecModel&gt; res = mongoTemplate.findAll(SpecModel.class, <span class="hljs-string">&quot;t_specification&quot;</span>);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*多条件查询*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;SpecModel&gt; <span class="hljs-title">findToSpecProblem</span><span class="hljs-params">(SpecAskModel specAskModel)</span> </span>&#123;<br>    Criteria criteria = <span class="hljs-keyword">null</span>;<br>    criteria =Criteria.where(<span class="hljs-string">&quot;type&quot;</span>).is(specAskModel.getType());<br>    criteria =criteria.and(<span class="hljs-string">&quot;region&quot;</span>).is(specAskModel.getRegion());<br>    Query query=<span class="hljs-keyword">new</span> Query(criteria);<br>    List&lt;SpecModel&gt; res = mongoTemplate.find(query, SpecAskModel.class, <span class="hljs-string">&quot;t_spec_problem&quot;</span>);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*查询唯一*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> DemoEntity <span class="hljs-title">findDemoById</span><span class="hljs-params">(Long id)</span> </span>&#123;<br>    Query query = <span class="hljs-keyword">new</span> Query(Criteria.where(<span class="hljs-string">&quot;id&quot;</span>).is(id));<br>    DemoEntity demoEntity = mongoTemplate.findOne(query, DemoEntity.class);<br>    <span class="hljs-keyword">return</span> demoEntity;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*查询去重*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;SpecModel&gt; <span class="hljs-title">getCityByRegion</span><span class="hljs-params">(String region)</span> </span>&#123;<br>    Query query=<span class="hljs-keyword">new</span> Query(Criteria.where(<span class="hljs-string">&quot;region&quot;</span>).is(region));<br>    List&lt;SpecModel&gt; res = mongoTemplate.findDistinct(query,<span class="hljs-string">&quot;city&quot;</span>,SpecModel.class,SpecModel.class);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*模糊查询获取*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;SpecAskModel&gt; <span class="hljs-title">getAllProblem</span><span class="hljs-params">(SpecAskModel specAskModel)</span> </span>&#123;<br>    Criteria criteria = <span class="hljs-keyword">null</span>;<br>    String str =specAskModel.getCity()!=<span class="hljs-keyword">null</span>? <span class="hljs-string">&quot;.*?&quot;</span>+specAskModel.getCity()+<span class="hljs-string">&quot;.*&quot;</span>:<span class="hljs-string">&quot;.*.*&quot;</span>;<br>    criteria =Criteria.where(<span class="hljs-string">&quot;city&quot;</span>).regex(str);<br>    Query query=<span class="hljs-keyword">new</span> Query(criteria);<br>    List&lt;SpecAskModel&gt; res = mongoTemplate.find(query,SpecAskModel.class, <span class="hljs-string">&quot;t_spec_question&quot;</span>);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">*<span class="hljs-comment">//is相当于等于*  </span><br>*<span class="hljs-comment">//in相当于sql中的in*  </span><br>*<span class="hljs-comment">//ne相当于不等于*  </span><br>*<span class="hljs-comment">//orOperator接受多个条件，组成or逻辑* </span><br></code></pre></td></tr></table></figure><h5 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Query query = <span class="hljs-keyword">new</span> Query();<br>Criteria criteria = Criteria.where(<span class="hljs-string">&quot;createdAt&quot;</span>);<br>query.addCriteria(Criteria.where(<span class="hljs-string">&quot;_id&quot;</span>).is(entry.getValue()));<br>query.addCriteria(Criteria.where(<span class="hljs-string">&quot;_id&quot;</span>).in(list));<br>query.addCriteria(Criteria.where(<span class="hljs-string">&quot;fileName&quot;</span>).regex((String) entry.getValue()));<br></code></pre></td></tr></table></figure><h2 id="对内嵌数组进行增删改操作"><a href="#对内嵌数组进行增删改操作" class="headerlink" title="对内嵌数组进行增删改操作"></a>对内嵌数组进行增删改操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,String&gt; <span class="hljs-title">updateOperation</span><span class="hljs-params">(Map&lt;String,String&gt; map, Class&lt;?&gt; entityClass)</span> </span>&#123;<br>    Query query = Query.query(Criteria.where(<span class="hljs-string">&quot;_id&quot;</span>).is(map.get(<span class="hljs-string">&quot;id&quot;</span>)));<br>        query.addCriteria(Criteria.where(map.get(<span class="hljs-string">&quot;operation&quot;</span>)).is(map.get(<span class="hljs-string">&quot;userId&quot;</span>)));<br>    <span class="hljs-keyword">long</span> listLen = mongoTemplate.find(query, SpecAskModel.class).size();<br>    Update update = <span class="hljs-keyword">new</span> Update();<br>    <span class="hljs-keyword">if</span> (Boolean.valueOf(map.get(<span class="hljs-string">&quot;state&quot;</span>)) &amp;&amp; listLen == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//插入</span><br>        update.push(map.get(<span class="hljs-string">&quot;operation&quot;</span>),map.get(<span class="hljs-string">&quot;userId&quot;</span>));<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!Boolean.valueOf(map.get(<span class="hljs-string">&quot;state&quot;</span>)) &amp;&amp; listLen != <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">//删除</span><br>        update.pull(map.get(<span class="hljs-string">&quot;operation&quot;</span>),map.get(<span class="hljs-string">&quot;userId&quot;</span>));<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>    query = Query.query(Criteria.where(<span class="hljs-string">&quot;_id&quot;</span>).is(map.get(<span class="hljs-string">&quot;id&quot;</span>)));<br>    System.out.println(query);<br>    UpdateResult res = mongoTemplate.updateFirst(query, update, entityClass);<br>    <span class="hljs-keyword">return</span> map;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Aggregation分组聚合"><a href="#Aggregation分组聚合" class="headerlink" title="Aggregation分组聚合"></a>Aggregation分组聚合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Aggregation aggregation  = Aggregation.newAggregation(<br>                Aggregation.project(<span class="hljs-string">&quot;_id&quot;</span>,<span class="hljs-string">&quot;houseNum&quot;</span>,<span class="hljs-string">&quot;city&quot;</span>,<span class="hljs-string">&quot;region&quot;</span>,<span class="hljs-string">&quot;type&quot;</span>,<span class="hljs-string">&quot;buildingType&quot;</span>,<span class="hljs-string">&quot;height&quot;</span>),<br>                Aggregation.match(criteria),<br><span class="hljs-comment">//                Aggregation.unwind(&quot;orders&quot;),</span><br>                Aggregation.group(<span class="hljs-string">&quot;buildingType&quot;</span>).count().as(<span class="hljs-string">&quot;count&quot;</span>),<br><span class="hljs-comment">//                Aggregation.sort(new Sort(new Sort.Order(Sort.Direction.DESC, &quot;totalPayment&quot;))),</span><br>                Aggregation.skip(pageable.getPageNumber()*pageable.getPageSize()),<br>                Aggregation.limit(pageable.getPageSize())<br>        );<br>        List result = mongoTemplate.aggregate(aggregation,<span class="hljs-string">&quot;t_file_info&quot;</span>,Map.class).getMappedResults();<br></code></pre></td></tr></table></figure><ol><li>**<br>/***</li><li> ** project:列出所有本次查询的字段，包括查询条件的字段和需要搜索的字段；*</li><li> ** match:搜索条件criteria*</li><li> ** unwind：某一个字段是集合，将该字段分解成数组*</li><li> ** group：分组的字段，以及聚合相关查询*</li><li> **      sum：求和(同sql查询)*</li><li> **      count：数量(同sql查询)*</li><li> **      as:别名(同sql查询)*</li><li> **      addToSet：将符合的字段值添加到一个集合或数组中*</li><li> ** sort：排序*</li><li> ** skip*：接受一个数字n，丢弃结果集中的前n个文档。效率比较低，依然会遍历前n个文档</li><li> *limit：接受一个数字n，返回结果集中的前n个文档</li><li></li></ol><p><img src="C:\Users\Admin\AppData\Roaming\Typora\typora-user-images\image-20211125173923178.png" alt="image-20211125173923178"></p>]]></content>
    
    
    
    <tags>
      
      <tag>mongo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你好</title>
    <link href="/2021/12/21/hello-world/"/>
    <url>/2021/12/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>2021年12月8日15:17:10</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>git的使用</title>
    <link href="/2021/12/15/git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/12/15/git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h1><h2 id="git-branch-d-删除本地已合并的分支"><a href="#git-branch-d-删除本地已合并的分支" class="headerlink" title="git branch -d:删除本地已合并的分支"></a>git branch -d:删除本地已合并的分支</h2><p>git branch -d [branchname]<code>某些情况下可以用</code>git branch -D [branchName]` (<strong>使用时应注意是否已合并</strong>)</p><p>区别:<br>git branch -d 会在删除前检查merge状态（其与上游分支或者与head）。<br>git branch -D 是git branch –delete –force的简写，它会直接删除。</p><p>共同点:<br>都是删除本地分支的方法（与删除远程分支命令相独立，要想本地和远程都删除，必须得运行两个命令）。</p><h2 id="git-branch-查看本地分支"><a href="#git-branch-查看本地分支" class="headerlink" title="git branch:查看本地分支"></a>git branch:查看本地分支</h2><h2 id="git-branch-r-查看远程分支"><a href="#git-branch-r-查看远程分支" class="headerlink" title="git branch -r:查看远程分支"></a>git branch -r:查看远程分支</h2><p>git stash save “icon to svg”  暂存</p><p>git stash pop</p><p>git rebase refactor  在自己分支同步refactor  的</p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021年12月14日</title>
    <link href="/2021/12/14/2021%E5%B9%B412%E6%9C%8814%E6%97%A5/"/>
    <url>/2021/12/14/2021%E5%B9%B412%E6%9C%8814%E6%97%A5/</url>
    
    <content type="html"><![CDATA[<p>今天学习了SpringCloud和Eureka的部署，并且进行了代码实操。</p><blockquote><p>spring cloud 为开发人员提供了快速构建分布式系统的一些工具，包括配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等。它运行环境简单，可以在开发人员的电脑上跑。</p></blockquote><h2 id="新建父工程："><a href="#新建父工程：" class="headerlink" title="新建父工程："></a>新建父工程：</h2><p>配置pom.xml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br>    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;<br><br>    &lt;groupId&gt;cn.itcast.demo&lt;/groupId&gt;<br>    &lt;artifactId&gt;springCloud-demo&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">1.0</span>&lt;/version&gt;<br>    &lt;modules&gt;<br>        &lt;<span class="hljs-keyword">module</span>&gt;eureka-server&lt;/<span class="hljs-keyword">module</span>&gt;<br>        &lt;<span class="hljs-keyword">module</span>&gt;server&lt;/<span class="hljs-keyword">module</span>&gt;<br>        &lt;<span class="hljs-keyword">module</span>&gt;api&lt;/<span class="hljs-keyword">module</span>&gt;<br>        &lt;<span class="hljs-keyword">module</span>&gt;provider-dept-<span class="hljs-number">8001</span>&lt;/<span class="hljs-keyword">module</span>&gt;<br>        &lt;<span class="hljs-keyword">module</span>&gt;order&lt;/<span class="hljs-keyword">module</span>&gt;<br>    &lt;/modules&gt;<br><br>    &lt;packaging&gt;pom&lt;/packaging&gt;<br><br>    &lt;!--SpringBoot版本，和下面的SpringCloud版本，必须对应匹配，否则会不兼容！！！！--&gt;<br>    &lt;parent&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>        &lt;version&gt;<span class="hljs-number">2.3</span><span class="hljs-number">.9</span>.RELEASE&lt;/version&gt;<br>        &lt;relativePath/&gt;<br>    &lt;/parent&gt;<br><br>    &lt;properties&gt;<br>        &lt;project.build.sourceEncoding&gt;UTF-<span class="hljs-number">8</span>&lt;/project.build.sourceEncoding&gt;<br>        &lt;project.reporting.outputEncoding&gt;UTF-<span class="hljs-number">8</span>&lt;/project.reporting.outputEncoding&gt;<br>        &lt;java.version&gt;<span class="hljs-number">8</span>&lt;/java.version&gt;<br>        &lt;maven.compiler.source&gt;$&#123;java.version&#125;&lt;/maven.compiler.source&gt;<br>        &lt;maven.compiler.target&gt;$&#123;java.version&#125;&lt;/maven.compiler.target&gt;<br>        &lt;spring-cloud.version&gt;Hoxton.SR10&lt;/spring-cloud.version&gt;<br>        &lt;mysql.version&gt;<span class="hljs-number">5.1</span><span class="hljs-number">.47</span>&lt;/mysql.version&gt;<br>        &lt;mybatis.version&gt;<span class="hljs-number">2.1</span><span class="hljs-number">.1</span>&lt;/mybatis.version&gt;<br>    &lt;/properties&gt;<br><br>    &lt;dependencyManagement&gt;<br>        &lt;dependencies&gt;<br>            &lt;!-- springCloud --&gt;<br>            &lt;dependency&gt;<br>                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;<br>                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;<br>                &lt;type&gt;pom&lt;/type&gt;<br>                &lt;scope&gt;<span class="hljs-keyword">import</span>&lt;/scope&gt;<br>            &lt;/dependency&gt;<br>            &lt;dependency&gt;<br>                &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>                &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>                &lt;version&gt;<span class="hljs-number">1.18</span><span class="hljs-number">.20</span>&lt;/version&gt;<br>            &lt;/dependency&gt;<br><br>        &lt;/dependencies&gt;<br>    &lt;/dependencyManagement&gt;<br>    &lt;dependencies&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>    &lt;/dependencies&gt;<br><br>    &lt;build&gt;<br>        &lt;plugins&gt;<br>            &lt;plugin&gt;<br>                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;<br>            &lt;/plugin&gt;<br>        &lt;/plugins&gt;<br>    &lt;/build&gt;<br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><h2 id="Eureka的部署"><a href="#Eureka的部署" class="headerlink" title="Eureka的部署"></a>Eureka的部署</h2><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">server:<br>  port: <span class="hljs-number">10086</span> # 服务端口<br>spring:<br>  application:<br>    ###服务名称<br>    name: eureka-server-center # eureka的服务名称<br>  security:<br>    basic:<br>      enable: <span class="hljs-keyword">true</span> #开启基于HTTP basic的认证<br>    user: #配置用户的账号信息<br>      name: zpc<br>      password: <span class="hljs-number">123456</span><br>eureka:<br>  instance:<br>    #注册中心地址<br>    hostname: localhost<br>  ##客户端调用地址<br>  client:<br>    service-url:  # eureka的地址信息<br>      defaultZone: http:<span class="hljs-comment">//$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/    # defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br>    ###是否将自己注册到Eureka服务中,因为该应用本身就是注册中心，不需要再注册自己（集群的时候为<span class="hljs-keyword">true</span>）<br>    register-with-eureka: <span class="hljs-keyword">true</span><br>    ###是否从Eureka中获取注册信息,因为自己为注册中心,不会在该应用中的检索服务信息<br>    fetch-registry: <span class="hljs-keyword">true</span><br>  server:<br>    enable-self-preservation: <span class="hljs-keyword">false</span> #禁用自我保护模式<br><br><br><br></code></pre></td></tr></table></figure><h3 id="EurekaApplication-java"><a href="#EurekaApplication-java" class="headerlink" title="EurekaApplication.java"></a>EurekaApplication.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.eureka;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;<br><br><span class="hljs-comment">//自动装配的开关</span><br><span class="hljs-meta">@EnableEurekaServer</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EurekaApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(EurekaApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>pom.xml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br>    &lt;parent&gt;<br>        &lt;artifactId&gt;springCloud-demo&lt;/artifactId&gt;<br>        &lt;groupId&gt;cn.itcast.demo&lt;/groupId&gt;<br>        &lt;version&gt;<span class="hljs-number">1.0</span>&lt;/version&gt;<br>    &lt;/parent&gt;<br>    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;<br><br>    &lt;artifactId&gt;eureka-server&lt;/artifactId&gt;<br><br>    &lt;dependencies&gt;<br>        &lt;!--eureka服务端，在引入SpringCloud中，只要父工程配置好了，子工程无需指定任何版本信息--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>&lt;!--        &lt;dependency&gt;--&gt;<br>&lt;!--            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;<br>&lt;!--            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;--&gt;<br>&lt;!--        &lt;/dependency&gt;--&gt;<br>    &lt;/dependencies&gt;<br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><h2 id="服务提供者和消费者的application-yml配置"><a href="#服务提供者和消费者的application-yml配置" class="headerlink" title="服务提供者和消费者的application.yml配置"></a>服务提供者和消费者的application.yml配置</h2><h3 id="app-item"><a href="#app-item" class="headerlink" title="app-item"></a>app-item</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">server:<br>  port: <span class="hljs-number">10010</span> # 服务端口<br>spring:<br>  application:<br>    name: app-item # 服务名称<br>eureka:<br>  instance:<br>    hostname: localhost<br>  client:<br>    service-url:  # eureka的地址信息<br>      defaultZone: http:<span class="hljs-comment">//127.0.0.1:10086/eureka/    # defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br>    ###因为该应用为服务提供者，是eureka的一个客户端，需要注册到注册中心<br>    register-with-eureka: <span class="hljs-keyword">true</span><br>    ###是否需要从Eureka检索服务信息<br>    fetch-registry: <span class="hljs-keyword">true</span><br></code></pre></td></tr></table></figure><h3 id="app-order"><a href="#app-order" class="headerlink" title="app-order"></a>app-order</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">server:<br>  port: <span class="hljs-number">10011</span> # 服务端口<br>spring:<br>  application:<br>    name: app-order # 服务名称<br>myspcloud:<br>  item:<br>    url: http:<span class="hljs-comment">//127.0.0.1:10010/item/</span><br>eureka:<br>  instance:<br>    hostname: localhost<br>  client:<br>    service-url:  # eureka的地址信息<br>      defaultZone: http:<span class="hljs-comment">//127.0.0.1:10086/eureka/    # defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br>    ###因为该应用为服务提供者，是eureka的一个客户端，需要注册到注册中心<br>    register-with-eureka: <span class="hljs-keyword">true</span><br>    ###是否需要从Eureka检索服务信息<br>    fetch-registry: <span class="hljs-keyword">true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于SpringCloud中Eureka的使用</title>
    <link href="/2021/12/14/%E5%9F%BA%E4%BA%8ESpringCloud%E4%B8%ADEureka%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/12/14/%E5%9F%BA%E4%BA%8ESpringCloud%E4%B8%ADEureka%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="使用-SpringBoot-实现微服务"><a href="#使用-SpringBoot-实现微服务" class="headerlink" title="使用 SpringBoot 实现微服务"></a>使用 SpringBoot 实现微服务</h1><p>那应该怎么解决呢？ – 通过服务注册、发现的机制来完成。</p><p>原理示意图：</p><img src="https://img-blog.csdnimg.cn/201811032243307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pwY2FuZHpoag==,size_16,color_FFFFFF,t_70" alt="原理示意图"><p>由上图可以看出：</p><p> 1、服务提供者将服务注册到注册中心</p><p> 2、服务消费者通过注册中心查找服务</p><p> 3、查找到服务后进行调用</p><p> 4、服务的消费者与服务注册中心保持心跳连接，一旦服务提供者的地址发生变更时，注册中心会通知服务消费者</p><p>IDEA+Maven：</p><p>父工程-pom.xml：</p><p>首先创建一个maven主工程。</p><p>首先创建一个主Maven工程，在其pom文件引入依赖，spring Boot版本为2.0.3.RELEASE，Spring Cloud版本为Finchley.RELEASE。这个pom文件作为父pom文件，起到依赖版本控制的作用，其他module工程继承该pom。这一系列文章全部采用这种模式，其他文章的pom跟这个pom一样。再次说明一下，以后不再重复引入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br>    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;<br><br>    &lt;groupId&gt;cn.itcast.demo&lt;/groupId&gt;<br>    &lt;artifactId&gt;springCloud-demo&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">1.0</span>&lt;/version&gt;<br>    &lt;modules&gt;<br>        &lt;<span class="hljs-keyword">module</span>&gt;eureka-server&lt;/<span class="hljs-keyword">module</span>&gt;<br>        &lt;<span class="hljs-keyword">module</span>&gt;server&lt;/<span class="hljs-keyword">module</span>&gt;<br>        &lt;<span class="hljs-keyword">module</span>&gt;api&lt;/<span class="hljs-keyword">module</span>&gt;<br>        &lt;<span class="hljs-keyword">module</span>&gt;provider-dept-<span class="hljs-number">8001</span>&lt;/<span class="hljs-keyword">module</span>&gt;<br>        &lt;<span class="hljs-keyword">module</span>&gt;order&lt;/<span class="hljs-keyword">module</span>&gt;<br>    &lt;/modules&gt;<br><br>    &lt;packaging&gt;pom&lt;/packaging&gt;<br><br>    &lt;!--SpringBoot版本，和下面的SpringCloud版本，必须对应匹配，否则会不兼容！！！！--&gt;<br>    &lt;parent&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>        &lt;version&gt;<span class="hljs-number">2.3</span><span class="hljs-number">.9</span>.RELEASE&lt;/version&gt;<br>        &lt;relativePath/&gt;<br>    &lt;/parent&gt;<br><br>    &lt;properties&gt;<br>        &lt;project.build.sourceEncoding&gt;UTF-<span class="hljs-number">8</span>&lt;/project.build.sourceEncoding&gt;<br>        &lt;project.reporting.outputEncoding&gt;UTF-<span class="hljs-number">8</span>&lt;/project.reporting.outputEncoding&gt;<br>        &lt;java.version&gt;<span class="hljs-number">8</span>&lt;/java.version&gt;<br>        &lt;maven.compiler.source&gt;$&#123;java.version&#125;&lt;/maven.compiler.source&gt;<br>        &lt;maven.compiler.target&gt;$&#123;java.version&#125;&lt;/maven.compiler.target&gt;<br>        &lt;spring-cloud.version&gt;Hoxton.SR10&lt;/spring-cloud.version&gt;<br>        &lt;mysql.version&gt;<span class="hljs-number">5.1</span><span class="hljs-number">.47</span>&lt;/mysql.version&gt;<br>        &lt;mybatis.version&gt;<span class="hljs-number">2.1</span><span class="hljs-number">.1</span>&lt;/mybatis.version&gt;<br>    &lt;/properties&gt;<br><br>    &lt;dependencyManagement&gt;<br>        &lt;dependencies&gt;<br>            &lt;!-- springCloud --&gt;<br>            &lt;dependency&gt;<br>                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;<br>                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;<br>                &lt;type&gt;pom&lt;/type&gt;<br>                &lt;scope&gt;<span class="hljs-keyword">import</span>&lt;/scope&gt;<br>            &lt;/dependency&gt;<br>            &lt;dependency&gt;<br>                &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>                &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>                &lt;version&gt;<span class="hljs-number">1.18</span><span class="hljs-number">.20</span>&lt;/version&gt;<br>            &lt;/dependency&gt;<br><br>        &lt;/dependencies&gt;<br>    &lt;/dependencyManagement&gt;<br>    &lt;dependencies&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>    &lt;/dependencies&gt;<br><br>    &lt;build&gt;<br>        &lt;plugins&gt;<br>            &lt;plugin&gt;<br>                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;<br>            &lt;/plugin&gt;<br>        &lt;/plugins&gt;<br>    &lt;/build&gt;<br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><h1 id="注册中心Eureka部署成功效果"><a href="#注册中心Eureka部署成功效果" class="headerlink" title="注册中心Eureka部署成功效果"></a>注册中心Eureka部署成功效果</h1><p><img src="https://img-blog.csdnimg.cn/20181103224513630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pwY2FuZHpoag==,size_16,color_FFFFFF,t_70" alt="Eureka部署成功效果"></p><div>    <a href="https://blog.csdn.net/hellozpc/article/details/83692496?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163946428716780271596962%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=163946428716780271596962&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-4-83692496.pc_v2_rank_blog_default&utm_term=Spring+Cloud&spm=1018.2226.3001.4450" style="float:right;">参考链接</a></div>]]></content>
    
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Eureka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生活日记</title>
    <link href="/2021/11/13/%E7%94%9F%E6%B4%BB%E6%97%A5%E8%AE%B0/"/>
    <url>/2021/11/13/%E7%94%9F%E6%B4%BB%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="《浅眠》"><a href="#《浅眠》" class="headerlink" title="《浅眠》"></a>《浅眠》</h1><p>想就这样浅浅的眠于被窝，在自己小小的世界里安安静静。</p><p>曾经写过的愿望：我要天天吃饭，天天睡觉，天天唱歌，天天逛街，天天开心。这些看起来有点幼稚又可笑的心愿这么久了却从未实现过，然后慢慢慢慢的，就忘记了，忘记了去实现，也忘记了怎么去实现。</p><p>突然就记不清到底是从什么时候开始自己就不停地在赶路了，愿望着寻到一个合适的驿站停留下来，可是一直很努力的向前还是渐渐的就迷失在了自己的路上，寻不到那个小小的驿站，也回不去那个曾经启程的地方，只能这么不停不停的走……</p><p>曾经的那个小麦已经忘记了那个守望的心愿，当风雨把所有的期待都渐渐吹散的时候，她依旧在那里伫立，可是那些个期待的心情早已消失不见了，也许她还会相信，可是却不会再有希望，她只是认为相信至少还可以给她带来一丝丝的幸福……</p><p>很想奋不顾身的再去追寻曾经未实现的梦想，才发现现在的自己早已变得畏畏缩缩，所以只能这样远远的观望……</p><p>每天依旧忙忙碌碌，会被赞赏，也会被责怪，可是心里已经没有那么多深深浅浅的感情了，也许真的是没有梦想也可以过一天一天的小日子，可是，当初许的那个天天开心的愿望到哪里去了呢？</p>]]></content>
    
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
